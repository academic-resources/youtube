/*
    This file is part of the WebKit open source project.

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
    Boston, MA 02110-1301, USA.
*/

// FYMP - THIS FILE IS NOT AUTOGENERATED! It was added when integrating text-tracks from r152754.

#include "config.h"

#if ENABLE(VIDEO_TRACK)

#include "JSTextTrackList.h"
#include "JSEventListener.h"

#include "AtomicString.h"
#include "ExceptionCode.h"
#include "Event.h"
#include "JSEvent.h"
#include "JSNode.h"
#include "Node.h"
#include "TextTrackList.h"
#include "JSTextTrack.h"
#include <runtime/Error.h>
#include <wtf/GetPtr.h>

using namespace JSC;

namespace WebCore {

ASSERT_CLASS_FITS_IN_CELL(JSTextTrackList);

/* Hash table */
#if ENABLE(JIT)
#define THUNK_GENERATOR(generator) , generator
#else
#define THUNK_GENERATOR(generator)
#endif

static const HashTableValue JSTextTrackListTableValues[6] =
{
    { "length",        DontDelete | ReadOnly, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsTextTrackListLength),        (intptr_t)0                               THUNK_GENERATOR(0) },
	{ "onchange",      DontDelete,            (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsTextTrackListOnchange),      (intptr_t)setJSTextTrackListOnchange      THUNK_GENERATOR(0) },
    { "onaddtrack",    DontDelete,            (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsTextTrackListOnaddtrack),    (intptr_t)setJSTextTrackListOnaddtrack    THUNK_GENERATOR(0) },
    { "onremovetrack", DontDelete,            (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsTextTrackListOnremovetrack), (intptr_t)setJSTextTrackListOnremovetrack THUNK_GENERATOR(0) },
    { "constructor",   DontEnum | ReadOnly,   (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsTextTrackListConstructor),   (intptr_t)0                               THUNK_GENERATOR(0) },
    { 0, 0, 0, 0 THUNK_GENERATOR(0) }
};

#undef THUNK_GENERATOR
static JSC_CONST_HASHTABLE HashTable JSTextTrackListTable = { 17, 15, JSTextTrackListTableValues, 0 };
/* Hash table for constructor */
#if ENABLE(JIT)
#define THUNK_GENERATOR(generator) , generator
#else
#define THUNK_GENERATOR(generator)
#endif

static const HashTableValue JSTextTrackListConstructorTableValues[1] =
{
    { 0, 0, 0, 0 THUNK_GENERATOR(0) }
};

#undef THUNK_GENERATOR
static JSC_CONST_HASHTABLE HashTable JSTextTrackListConstructorTable = { 1, 0, JSTextTrackListConstructorTableValues, 0 };
class JSTextTrackListConstructor : public DOMConstructorObject {
public:
    JSTextTrackListConstructor(JSC::ExecState*, JSDOMGlobalObject*);

    virtual bool getOwnPropertySlot(JSC::ExecState*, const JSC::Identifier&, JSC::PropertySlot&);
    virtual bool getOwnPropertyDescriptor(JSC::ExecState*, const JSC::Identifier&, JSC::PropertyDescriptor&);
    virtual const JSC::ClassInfo* classInfo() const { return &s_info; }
    static const JSC::ClassInfo s_info;
    static PassRefPtr<JSC::Structure> createStructure(JSC::JSValue prototype)
    {
        return JSC::Structure::create(prototype, JSC::TypeInfo(JSC::ObjectType, StructureFlags), AnonymousSlotCount);
    }
protected:
    static const unsigned StructureFlags = JSC::OverridesGetOwnPropertySlot | JSC::ImplementsHasInstance | DOMConstructorObject::StructureFlags;
};

const ClassInfo JSTextTrackListConstructor::s_info = { "TextTrackListConstructor", 0, &JSTextTrackListConstructorTable, 0 };

JSTextTrackListConstructor::JSTextTrackListConstructor(ExecState* exec, JSDOMGlobalObject* globalObject)
    : DOMConstructorObject(JSTextTrackListConstructor::createStructure(globalObject->objectPrototype()), globalObject)
{
    putDirect(exec->propertyNames().prototype, JSTextTrackListPrototype::self(exec, globalObject), DontDelete | ReadOnly);
}

bool JSTextTrackListConstructor::getOwnPropertySlot(ExecState* exec, const Identifier& propertyName, PropertySlot& slot)
{
	const char* szDebug = propertyName.ascii();
    return getStaticValueSlot<JSTextTrackListConstructor, DOMObject>(exec, &JSTextTrackListConstructorTable, this, propertyName, slot);
}

bool JSTextTrackListConstructor::getOwnPropertyDescriptor(ExecState* exec, const Identifier& propertyName, PropertyDescriptor& descriptor)
{
	const char* szDebug = propertyName.ascii();
    return getStaticValueDescriptor<JSTextTrackListConstructor, DOMObject>(exec, &JSTextTrackListConstructorTable, this, propertyName, descriptor);
}

/* Hash table for prototype */
#if ENABLE(JIT)
#define THUNK_GENERATOR(generator) , generator
#else
#define THUNK_GENERATOR(generator)
#endif

static const HashTableValue JSTextTrackListPrototypeTableValues[5] =
{
    { "item",                DontDelete | Function, (intptr_t)static_cast<NativeFunction>(jsTextTrackListPrototypeFunctionItem),                (intptr_t)1 THUNK_GENERATOR(0) },
    { "addEventListener",    DontDelete | Function, (intptr_t)static_cast<NativeFunction>(jsTextTrackListPrototypeFunctionAddEventListener),    (intptr_t)3 THUNK_GENERATOR(0) },
    { "removeEventListener", DontDelete | Function, (intptr_t)static_cast<NativeFunction>(jsTextTrackListPrototypeFunctionRemoveEventListener), (intptr_t)3 THUNK_GENERATOR(0) },
    { "dispatchEvent",       DontDelete | Function, (intptr_t)static_cast<NativeFunction>(jsTextTrackListPrototypeFunctionDispatchEvent),       (intptr_t)1 THUNK_GENERATOR(0) },
    { 0, 0, 0, 0 THUNK_GENERATOR(0) }
};

#undef THUNK_GENERATOR
static JSC_CONST_HASHTABLE HashTable JSTextTrackListPrototypeTable = { 8, 7, JSTextTrackListPrototypeTableValues, 0 };
const ClassInfo JSTextTrackListPrototype::s_info = { "TextTrackListPrototype", 0, &JSTextTrackListPrototypeTable, 0 };

JSObject* JSTextTrackListPrototype::self(ExecState* exec, JSGlobalObject* globalObject)
{
    return getDOMPrototype<JSTextTrackList>(exec, globalObject);
}

bool JSTextTrackListPrototype::getOwnPropertySlot(ExecState* exec, const Identifier& propertyName, PropertySlot& slot)
{
	const char* szDebug = propertyName.ascii();
    return getStaticFunctionSlot<JSObject>(exec, &JSTextTrackListPrototypeTable, this, propertyName, slot);
}

bool JSTextTrackListPrototype::getOwnPropertyDescriptor(ExecState* exec, const Identifier& propertyName, PropertyDescriptor& descriptor)
{
    return getStaticFunctionDescriptor<JSObject>(exec, &JSTextTrackListPrototypeTable, this, propertyName, descriptor);
}

const ClassInfo JSTextTrackList::s_info = { "TextTrackList", 0, &JSTextTrackListTable, 0 };

JSTextTrackList::JSTextTrackList(NonNullPassRefPtr<Structure> structure, JSDOMGlobalObject* globalObject, PassRefPtr<TextTrackList> impl)
    : DOMObjectWithGlobalPointer(structure, globalObject)
    , m_impl(impl)
{
}

JSTextTrackList::~JSTextTrackList()
{
	impl()->invalidateJSEventListeners(this);
    forgetDOMObject(this, impl());
}

JSObject* JSTextTrackList::createPrototype(ExecState* exec, JSGlobalObject* globalObject)
{
    return new (exec) JSTextTrackListPrototype(globalObject, JSTextTrackListPrototype::createStructure(globalObject->objectPrototype()));
}

bool JSTextTrackList::getOwnPropertySlot(ExecState* exec, const Identifier& propertyName, PropertySlot& slot)
{
	const char* szDebug = propertyName.ascii();

    const HashEntry* entry = JSTextTrackListTable.entry(exec, propertyName);
    if (entry) {
        slot.setCustom(this, entry->propertyGetter());
        return true;
    }

    bool ok;
    unsigned index = propertyName.toUInt32(&ok, false);
    if (ok && index < static_cast<TextTrackList*>(impl())->length()) {
        slot.setCustomIndex(this, index, indexGetter);
        return true;
    }

    return getStaticValueSlot<JSTextTrackList, Base>(exec, &JSTextTrackListTable, this, propertyName, slot);
}

bool JSTextTrackList::getOwnPropertyDescriptor(ExecState* exec, const Identifier& propertyName, PropertyDescriptor& descriptor)
{
    bool ok;
    unsigned index = propertyName.toUInt32(&ok, false);
    if (ok && index < static_cast<TextTrackList*>(impl())->length()) {
        PropertySlot slot;
        slot.setCustomIndex(this, index, indexGetter);
        descriptor.setDescriptor(slot.getValue(exec, propertyName), DontDelete | ReadOnly);
        return true;
    }

    return getStaticValueDescriptor<JSTextTrackList, Base>(exec, &JSTextTrackListTable, this, propertyName, descriptor);
}

bool JSTextTrackList::getOwnPropertySlot(ExecState* exec, unsigned propertyName, PropertySlot& slot)
{
    if (propertyName < static_cast<TextTrackList*>(impl())->length()) {
        slot.setCustomIndex(this, propertyName, indexGetter);
        return true;
    }
    return getOwnPropertySlot(exec, Identifier::from(exec, propertyName), slot);
}

// Attributes

JSValue jsTextTrackListLength(ExecState* exec, JSValue slotBase, const Identifier&)
{
    JSTextTrackList* castedThis = static_cast<JSTextTrackList*>(asObject(slotBase));
    UNUSED_PARAM(exec);
    TextTrackList* imp = static_cast<TextTrackList*>(castedThis->impl());
    JSValue result = jsNumber(exec, imp->length());
    return result;
}

JSValue jsTextTrackListOnchange(ExecState* exec, JSValue slotBase, const Identifier&)
{
    JSTextTrackList* castedThis = static_cast<JSTextTrackList*>(asObject(slotBase));
    UNUSED_PARAM(exec);
    TextTrackList* imp = static_cast<TextTrackList*>(castedThis->impl());
    if (EventListener* listener = imp->onchange()) {
        if (const JSEventListener* jsListener = JSEventListener::cast(listener)) {
            if (JSObject* jsFunction = jsListener->jsFunction(imp->scriptExecutionContext()))
                return jsFunction;
        }
    }
    return jsNull();
}
void setJSTextTrackListOnchange(ExecState* exec, JSObject* thisObject, JSValue value)
{
    UNUSED_PARAM(exec);
    TextTrackList* imp = static_cast<TextTrackList*>(static_cast<JSTextTrackList*>(thisObject)->impl());
    imp->setOnchange(createJSAttributeEventListener(exec, value, thisObject));
}
JSValue jsTextTrackListOnaddtrack(ExecState* exec, JSValue slotBase, const Identifier&)
{
    JSTextTrackList* castedThis = static_cast<JSTextTrackList*>(asObject(slotBase));
    UNUSED_PARAM(exec);
    TextTrackList* imp = static_cast<TextTrackList*>(castedThis->impl());
    if (EventListener* listener = imp->onaddtrack()) {
        if (const JSEventListener* jsListener = JSEventListener::cast(listener)) {
            if (JSObject* jsFunction = jsListener->jsFunction(imp->scriptExecutionContext()))
                return jsFunction;
        }
    }
    return jsNull();
}
void setJSTextTrackListOnaddtrack(ExecState* exec, JSObject* thisObject, JSValue value)
{
    UNUSED_PARAM(exec);
    TextTrackList* imp = static_cast<TextTrackList*>(static_cast<JSTextTrackList*>(thisObject)->impl());
    imp->setOnaddtrack(createJSAttributeEventListener(exec, value, thisObject));
}
JSValue jsTextTrackListOnremovetrack(ExecState* exec, JSValue slotBase, const Identifier&)
{
    JSTextTrackList* castedThis = static_cast<JSTextTrackList*>(asObject(slotBase));
    UNUSED_PARAM(exec);
    TextTrackList* imp = static_cast<TextTrackList*>(castedThis->impl());
    if (EventListener* listener = imp->onremovetrack()) {
        if (const JSEventListener* jsListener = JSEventListener::cast(listener)) {
            if (JSObject* jsFunction = jsListener->jsFunction(imp->scriptExecutionContext()))
                return jsFunction;
        }
    }
    return jsNull();
}
void setJSTextTrackListOnremovetrack(ExecState* exec, JSObject* thisObject, JSValue value)
{
    UNUSED_PARAM(exec);
    TextTrackList* imp = static_cast<TextTrackList*>(static_cast<JSTextTrackList*>(thisObject)->impl());
    imp->setOnremovetrack(createJSAttributeEventListener(exec, value, thisObject));
}

JSValue jsTextTrackListConstructor(ExecState* exec, JSValue slotBase, const Identifier&)
{
    JSTextTrackList* domObject = static_cast<JSTextTrackList*>(asObject(slotBase));
    return JSTextTrackList::getConstructor(exec, domObject->globalObject());
}
void JSTextTrackList::getOwnPropertyNames(ExecState* exec, PropertyNameArray& propertyNames, EnumerationMode mode)
{
    for (unsigned i = 0; i < static_cast<TextTrackList*>(impl())->length(); ++i)
        propertyNames.add(Identifier::from(exec, i));
     Base::getOwnPropertyNames(exec, propertyNames, mode);
}

JSValue JSTextTrackList::getConstructor(ExecState* exec, JSGlobalObject* globalObject)
{
    return getDOMConstructor<JSTextTrackListConstructor>(exec, static_cast<JSDOMGlobalObject*>(globalObject));
}

EncodedJSValue JSC_HOST_CALL jsTextTrackListPrototypeFunctionItem(ExecState* exec)
{
    JSValue thisValue = exec->hostThisValue();
    if (!thisValue.inherits(&JSTextTrackList::s_info))
        return throwVMTypeError(exec);
    JSTextTrackList* castedThis = static_cast<JSTextTrackList*>(asObject(thisValue));
    TextTrackList* imp = static_cast<TextTrackList*>(castedThis->impl());
    int index = exec->argument(0).toInt32(exec);
    if (index < 0) {
        setDOMException(exec, INDEX_SIZE_ERR);
        return JSValue::encode(jsUndefined());
    }

    JSC::JSValue result = toJS(exec, castedThis->globalObject(), WTF::getPtr(imp->item(index)));
    return JSValue::encode(result);
}

EncodedJSValue JSC_HOST_CALL jsTextTrackListPrototypeFunctionAddEventListener(ExecState* exec)
{
    JSValue thisValue = exec->hostThisValue();
    if (!thisValue.inherits(&JSTextTrackList::s_info))
        return throwVMTypeError(exec);
    JSTextTrackList* castedThis = static_cast<JSTextTrackList*>(asObject(thisValue));
    TextTrackList* imp = static_cast<TextTrackList*>(castedThis->impl());
    JSValue listener = exec->argument(1);
    if (!listener.isObject())
        return JSValue::encode(jsUndefined());
    imp->addEventListener(ustringToAtomicString(exec->argument(0).toString(exec)), JSEventListener::create(asObject(listener), castedThis, false, currentWorld(exec)), exec->argument(2).toBoolean(exec));
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsTextTrackListPrototypeFunctionRemoveEventListener(ExecState* exec)
{
    JSValue thisValue = exec->hostThisValue();
    if (!thisValue.inherits(&JSTextTrackList::s_info))
        return throwVMTypeError(exec);
    JSTextTrackList* castedThis = static_cast<JSTextTrackList*>(asObject(thisValue));
    TextTrackList* imp = static_cast<TextTrackList*>(castedThis->impl());
    JSValue listener = exec->argument(1);
    if (!listener.isObject())
        return JSValue::encode(jsUndefined());
    imp->removeEventListener(ustringToAtomicString(exec->argument(0).toString(exec)), JSEventListener::create(asObject(listener), castedThis, false, currentWorld(exec)).get(), exec->argument(2).toBoolean(exec));
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsTextTrackListPrototypeFunctionDispatchEvent(ExecState* exec)
{
    JSValue thisValue = exec->hostThisValue();
    if (!thisValue.inherits(&JSTextTrackList::s_info))
        return throwVMTypeError(exec);
    JSTextTrackList* castedThis = static_cast<JSTextTrackList*>(asObject(thisValue));
    TextTrackList* imp = static_cast<TextTrackList*>(castedThis->impl());
    ExceptionCode ec = 0;
    Event* event = toEvent(exec->argument(0));

    JSC::JSValue result = jsBoolean(imp->dispatchEvent(event, ec));
    setDOMException(exec, ec);
    return JSValue::encode(result);
}

JSValue JSTextTrackList::indexGetter(ExecState* exec, JSValue slotBase, unsigned index)
{
    JSTextTrackList* thisObj = static_cast<JSTextTrackList*>(asObject(slotBase));
    return toJS(exec, thisObj->globalObject(), static_cast<TextTrackList*>(thisObj->impl())->item(index));
}
JSC::JSValue toJS(JSC::ExecState* exec, JSDOMGlobalObject* globalObject, TextTrackList* object)
{
    return getDOMObjectWrapper<JSTextTrackList>(exec, globalObject, object);
}
TextTrackList* toTextTrackList(JSC::JSValue value)
{
    return value.inherits(&JSTextTrackList::s_info) ? static_cast<JSTextTrackList*>(asObject(value))->impl() : 0;
}

} // WebCore

#endif // ENABLE(VIDEO_TRACK)

