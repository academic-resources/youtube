<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" id="svg-root" width="100%" height="100%" baseProfile="full" onload="onLoad(evt)" version="1.1" viewBox="0 0 480 360"><d:SVGTestCase xmlns:d="http://www.w3.org/2000/02/svg/testsuite/description/" author="Jon Ferraiolo" reviewer="SVGWG" status="accepted" template-version="1.4" testname="$RCSfile: extend-namespace-01-f.svg,v $" version="$Revision: 1.8 $"><d:testDescription xmlns="http://www.w3.org/1999/xhtml" href="http://www.w3.org/TR/SVG11/extend.html#ForeignNamespaces"><p>Test mixing a business data namespace with elements in SVG namespace.</p><p>The test case uses a different namespace to hold fake sales data. Using ECMAScript to make calls to the DOM, the test case extracts the sales data and then makes calls to the SVG DOM to build up a &apos;path&apos; element and a &apos;text&apos; element for each individual pie slice.</p></d:testDescription><d:operatorScript xmlns="http://www.w3.org/1999/xhtml"><p>Run the test. No interaction required.</p></d:operatorScript><d:passCriteria xmlns="http://www.w3.org/1999/xhtml"><p>The result should show five pie slices. The first pie slice should be exploded, with a pink fill and a blue border. The other pie slices should have various levels of gray fill and black borders. The name of each region should appear in black towards the center of the pie slice.</p></d:passCriteria></d:SVGTestCase><title id="test-title">$RCSfile: extend-namespace-01-f.svg,v $</title><defs><font-face font-family="SVGFreeSansASCII" unicode-range="U+0-7F"><font-face-src><font-face-uri xlink:href="../resources/SVGFreeSans.svg#ascii"/></font-face-src></font-face></defs><g id="test-body-content" font-family="SVGFreeSansASCII,sans-serif" font-size="18"><g xmlns="http://www.w3.org/2000/svg" xmlns:bd="http://example.org/ExampleBusinessData"><defs><script type="text/ecmascript">var svg_ns = &quot;http://www.w3.org/2000/svg&quot;; var bd_ns = &quot;http://example.org/ExampleBusinessData&quot;; function onLoad(evt){ // Get Document var svgElement = evt.target; var doc = svgElement.ownerDocument; var resultsElement = doc.getElementById(&apos;results&apos;); var gElement = doc.getElementById(&apos;PieParent&apos;); // Count the number of regions. RegionNodeList = doc.getElementsByTagNameNS(bd_ns, &quot;Region&quot;); regionCount = RegionNodeList.length; // Get the region data. RegionNameNodeList = doc.getElementsByTagNameNS(bd_ns, &quot;RegionName&quot;); RegionResultNodeList = doc.getElementsByTagNameNS(bd_ns, &quot;RegionResult&quot;); // Get the sum of the values of the regions. var total = 0; for (regionIndex = 0; regionIndex &lt; regionCount; regionIndex++) total = total + Number(RegionResultNodeList.item(regionIndex).firstChild.nodeValue); // Build a pie chart. var startAngle = 0; for (regionIndex = 0; regionIndex &lt; regionCount; regionIndex++) { regionName = RegionNameNodeList.item(regionIndex).firstChild.nodeValue; regionResult = Number(RegionResultNodeList.item(regionIndex).firstChild.nodeValue); // Build the pie slice. textElement = doc.createElementNS(svg_ns, &quot;text&quot;); textNode = doc.createTextNode(regionName); textElement.appendChild(textNode); pathElement = doc.createElementNS(svg_ns, &quot;path&quot;); endAngle = startAngle - regionResult * Math.PI * 2 / total; dAttribute = &quot;M240,170 L&quot;; gray = Math.round(Number(255 * (regionIndex+2)) / (regionCount+2)); midAngle = (startAngle + endAngle) / 2; textElement.setAttributeNS(null, &quot;x&quot;, Math.round(240+65*Math.cos(midAngle))); textElement.setAttributeNS(null, &quot;y&quot;, Math.round(170+65*Math.sin(midAngle))); dAttribute = dAttribute + Math.round(240+100*Math.cos(startAngle)); dAttribute = dAttribute + &apos;,&apos;; dAttribute = dAttribute + Math.round(170+100*Math.sin(startAngle)); dAttribute = dAttribute + &apos; A100,100 0 0,0 &apos;; dAttribute = dAttribute + Math.round(240+100*Math.cos(endAngle)); dAttribute = dAttribute + &apos;,&apos;; dAttribute = dAttribute + Math.round(170+100*Math.sin(endAngle)); dAttribute = dAttribute + &apos;z&apos;; pathElement.setAttributeNS(null, &quot;d&quot;, dAttribute); pathElement.setAttributeNS(null, &quot;fill&quot;, &quot;rgb(&quot;+gray+&quot;,&quot;+gray+&quot;,&quot;+gray+&quot;)&quot;); pathElement.setAttributeNS(null, &quot;stroke&quot;, &quot;black&quot;); pathElement.setAttributeNS(null, &quot;stroke-width&quot;, &quot;2&quot;); // Temporary, for CSS styling. pathElement.setAttributeNS(null, &quot;fill&quot;, &quot;rgb(&quot;+gray+&quot;,&quot;+gray+&quot;,&quot;+gray+&quot;)&quot;); pathElement.setAttributeNS(null, &quot;stroke&quot;, &quot;black&quot;); pathElement.setAttributeNS(null, &quot;stroke-width&quot;, &quot;2&quot;); if (regionIndex == 0) { var firstSliceOffset = 30; var transformValue = &quot;translate(&quot; + Math.round(firstSliceOffset * Math.cos(midAngle)) + &quot;,&quot; + Math.round(firstSliceOffset * Math.sin(midAngle)) + &quot;)&quot;; pathElement.setAttributeNS(null, &quot;transform&quot;, transformValue); textElement.setAttributeNS(null, &quot;transform&quot;, transformValue); pathElement.setAttributeNS(null, &quot;fill&quot;, &quot;#FF6666&quot;); pathElement.setAttributeNS(null, &quot;stroke&quot;, &quot;#0000FF&quot;); pathElement.setAttributeNS(null, &quot;stroke-width&quot;, &quot;3&quot;); // Temporary, for CSS styling. pathElement.setAttributeNS(null, &quot;fill&quot;, &quot;#FF8888&quot;); pathElement.setAttributeNS(null, &quot;stroke&quot;, &quot;#0000FF&quot;); pathElement.setAttributeNS(null, &quot;stroke-width&quot;, &quot;3&quot;); } gElement.appendChild(pathElement); gElement.appendChild(textElement); startAngle = endAngle; } }</script></defs><bd:Results id="results"><bd:Region><bd:RegionName>East</bd:RegionName><bd:RegionResult>3</bd:RegionResult></bd:Region><bd:Region><bd:RegionName>North</bd:RegionName><bd:RegionResult>4</bd:RegionResult></bd:Region><bd:Region><bd:RegionName>West</bd:RegionName><bd:RegionResult>5</bd:RegionResult></bd:Region><bd:Region><bd:RegionName>Central</bd:RegionName><bd:RegionResult>3.2</bd:RegionResult></bd:Region><bd:Region><bd:RegionName>South</bd:RegionName><bd:RegionResult>6</bd:RegionResult></bd:Region></bd:Results><text x="240" y="30" font-family="Arial" font-size="16" text-anchor="middle">Pie chart built from data in a different namespace.</text></g><g id="PieParent" font-family="Arial" font-size="14" text-anchor="middle"><desc>Pie chart is built within this &apos;g&apos; element</desc></g></g><g font-family="SVGFreeSansASCII,sans-serif" font-size="32"><text id="revision" x="10" y="340" fill="#000" stroke="none">$Revision: 1.8 $</text></g><rect id="test-frame" width="478" height="358" x="1" y="1" fill="none" stroke="#000"/></svg>