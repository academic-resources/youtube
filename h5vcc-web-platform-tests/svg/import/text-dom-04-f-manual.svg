<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" id="svg-root" width="100%" height="100%" onload="test()" viewBox="0 0 480 360"><d:SVGTestCase xmlns:d="http://www.w3.org/2000/02/svg/testsuite/description/" author="ED" reviewer="AG" status="reviewed" template-version="1.4" testname="$RCSfile: text-dom-04-f.svg,v $" version="$Revision: 1.4 $"><d:testDescription xmlns="http://www.w3.org/1999/xhtml" href="http://www.w3.org/TR/SVG11/text.html#InterfaceSVGTextContentElement"><p>This tests the SVGTextContentElement.getSubStringLength method.</p></d:testDescription><d:operatorScript xmlns="http://www.w3.org/1999/xhtml"><p>Run the test. No interaction required.</p></d:operatorScript><d:passCriteria xmlns="http://www.w3.org/1999/xhtml"><p>To pass the test there should be no red visible.</p></d:passCriteria></d:SVGTestCase><title id="test-title">$RCSfile: text-dom-04-f.svg,v $</title><defs><font-face font-family="SVGFreeSansASCII" unicode-range="U+0-7F"><font-face-src><font-face-uri xlink:href="../resources/SVGFreeSans.svg#ascii"/></font-face-src></font-face></defs><g id="test-body-content" font-family="SVGFreeSansASCII,sans-serif" font-size="18"><defs><font id="mini" horiz-adv-x="4000"><font-face alphabetic="0" ascent="800" descent="-200" font-family="simplesvgfont" units-per-em="4000"/><glyph d="M0 4000l2000 -4000l2000 4000Z" glyph-name="a" horiz-adv-x="4100" unicode="a"/><glyph d="M0 0l2000 0000l0 2000l-2000 0Z" glyph-name="b" horiz-adv-x="2000" unicode="b"/><glyph d="M0 0l2000 2000l-2000 2000Z" horiz-adv-x="800" unicode="cb"/><glyph d="M0 0L2000 2000l-2000 0L2000 0Z" glyph-name="c" horiz-adv-x="1900" unicode="c"/><glyph d="M1000,0 h1000 v-1000 h-1000 z" glyph-name="compliance" horiz-adv-x="2100" unicode="ùçí"/><hkern k="500" u1="c" u2="a"/></font></defs><script type="text/ecmascript"><![CDATA[
		function test()
		{
			var t = document.getElementById("t");
			var r = document.getElementById("r");
			var res = document.getElementById("res");
			var isPassed = true;
			
			// string:  abca&#x1D352;cb
			// indices: 0123   4  5  67
			
			var tests = new Array("getSubStringLength(0,1)", "4100", 	// 'a'
								  "getSubStringLength(0,2)", "6100", 	// 'ab'
								  "getSubStringLength(0,3)", "7500", 	// 'abc'
								  "getSubStringLength(0,4)", "11600", 	// 'abca'
								  "getSubStringLength(0,5)", "13700",	// 'abca' and high surrogate of 1D352
								  "getSubStringLength(0,6)", "13700",	// 'abca&#x1D352'
								  "getSubStringLength(0,7)", "14500",	// 'abca&#x1D352' and half of ligature 'cb'
								  "getSubStringLength(0,8)", "14500",	// 'abca&#x1D352cb'
								  "getSubStringLength(0,9)", "14500",	// 'abca&#x1D352cb'
								  "getSubStringLength(3,1)", "4100",	// 'a'
								  "getSubStringLength(1,1)", "2000",	// 'b'
								  "getSubStringLength(4,1)", "2100",	// high surrogate of 1D352
								  "getSubStringLength(4,2)", "2100",	// '&#x1D352'
								  "getSubStringLength(5,1)", "2100",	// low surrogate of 1D352
								  "getSubStringLength(6,1)", "800",		// first half of ligature 'cb'
								  "getSubStringLength(6,2)", "800",		// ligature 'cb'
								  "getSubStringLength(7,1)", "800",		// second half of ligature 'cb'
								  "getSubStringLength(8,1)", "INDEX_SIZE_ERR",
								  "getSubStringLength(9,0)", "INDEX_SIZE_ERR",
								  "getSubStringLength(-1,1)", "INDEX_SIZE_ERR",
								  "getSubStringLength(-57,0)", "INDEX_SIZE_ERR",
								  "getSubStringLength(0,-52)", "INDEX_SIZE_ERR",
								  "getSubStringLength(-1,-5)", "INDEX_SIZE_ERR",
								  "getSubStringLength(7,0)", "0", 		// second half of ligature 'cb'
								  "getSubStringLength(5,0)", "0",		// high surrogate of 1D352
								  "getSubStringLength(4,0)", "0"		// low surrogate of 1D352
								  );
			
			try
			{
				for(var i = 0; i < tests.length; i=i+2)
				{
					try
					{
						val = eval("t."+tests[i]);
					}
					catch(e)
					{
						if(e.code == DOMException.INDEX_SIZE_ERR)
						{
							val = "INDEX_SIZE_ERR"
						}
						else
						{
							val = e;
						}
					}
					
					if(val != tests[i+1])
					{
						throw "Failed " + tests[i] + " got " + val + " but expected " + tests[i+1];
					}
				}
			}
			catch(f)
			{
				isPassed = false;
				res.textContent = f;
			}
			
			if(isPassed)
			{
				r.setAttribute("fill", "none");
			}
		}
	]]></script><g transform="scale(0.02 0.02) translate(4000 2000)"><g id="reference" fill="red"><path d="M0 4000l2000 -4000l2000 4000Z" transform="scale(1 -1) translate(0 -8000)"/><path d="M0 0l2000 0000l0 2000l-2000 0Z" transform="translate(4100 6000)"/><path d="M0 0L2000 2000l-2000 0L2000 0Z" transform="translate(6100 6000)"/><path d="M0 4000l2000 -4000l2000 4000Z" transform="scale(1 -1) translate(7500 -8000)"/><path d="M1000,0 h1000 v-1000 h-1000 z" transform="scale(1 -1) translate(11600 -8000)"/><path d="M0 0l2000 2000l-2000 2000Z" transform="scale(1 -1) translate(13700 -8000)"/></g><text id="t" y="2em" fill="#0f0" font-family="simplesvgfont" font-size="4000">abcaùçícb</text><rect id="r" width="2000" height="2000" x="5000" y="10%" fill="red"/></g></g><g font-family="SVGFreeSansASCII,sans-serif" font-size="32"><text id="revision" x="10" y="340" fill="#000" stroke="none">$Revision: 1.4 $</text></g><rect id="test-frame" width="478" height="358" x="1" y="1" fill="none" stroke="#000"/><g id="draft-watermark"><rect width="478" height="20" x="1" y="1" fill="red" stroke="#000" stroke-width="1"/><text x="240" y="18" fill="#fff" stroke="#000" stroke-width=".5" font-family="SVGFreeSansASCII,sans-serif" font-size="20" font-weight="bold" text-anchor="middle">DRAFT</text></g></svg>